<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'>
<nta>
	<declaration>// Place global declarations here.

const int START_PASSANGER_COUNT = 100;
const int TIME_LIMIT = 100;
int PERIOD_TIME_MIN = 25;
int PERIOD_TIME_MAX = 50;

int passangerCountOnBoard = START_PASSANGER_COUNT;

// the size of channel between 2 places on board 
const int SIZE_CHANNEL = 20;

//type for channels - array with size in interval 0-SIZE_CHANNEL
typedef int[0, SIZE_CHANNEL] channels_type [4][4];

// type for generating starting conditions - on each of the positions can be between 20 to 30 percent of people (more would shutdown UPPAAL server)
// typedef int [START_PASSANGER_COUNT*20/100,START_PASSANGER_COUNT*30/100] position_people_start_count_type;
typedef int [25,25] position_people_start_count_type;
typedef int [0, START_PASSANGER_COUNT] position_people_count_array_type [4];

//amount of people on positions
position_people_count_array_type positionPeopleCount;

// sums of channels between two places must be lower than 20 - check in method lead
channels_type channels;

// channel to inform, that people are arriving
broadcast chan people_arriving;

//type for flooded parts
typedef bool flooded_parts_type [4];
typedef urgent chan flooded_parts_channel_type [4];

//flags of flooded parts of boat 
flooded_parts_type floodedParts;
flooded_parts_channel_type floodedPartsChan;</declaration>
	<template>
		<name>Captain</name>
		<parameter>int &amp; partIndex, urgent chan&amp; sink</parameter>
		<declaration>int getSuccessorIndex(int partIndex){
	if(partIndex = 3){
		return 0;
	}
	return partIndex +1;
}

int getPrecedessorIndex(int partIndex){
	if(partIndex = 0){
		return 3;
	}
	return partIndex -1;
}

clock progress_time;

bool isPartSunken(){
	return floodedParts[partIndex];
}

bool isArrivingPeople(){
    int i;
	for(i = 0; i &lt; 4 ; i++){
        if (channels[partIndex][i] != 0) return true;
	}
    return false;
}

void manageArrivingPeople(){
    int i;
	//people arrived to position
	for(i = 0; i &lt; 4 ; i++){
		positionPeopleCount[i] = positionPeopleCount[i] + channels[partIndex][i];
		channels[partIndex][i] = 0;
	}

}

bool isPeopleArrivingPeople(){
    int i;
	for(i = 0; i &lt; 4 ; i++){
        if (channels[partIndex][i] != 0) return true;
	}
    return false;
}


void manageSendingPeople(){
    int i;

	int precedessor = getPrecedessorIndex(partIndex);
	int successor = getSuccessorIndex(partIndex);
	positionPeopleCount[successor] = 0;
	//more people at successor	
	if(positionPeopleCount[successor] &lt; positionPeopleCount[partIndex]){
		referPeopleToPosition(successor);
	}
	//more People at precedessor
	if(positionPeopleCount[precedessor] &lt; positionPeopleCount[partIndex]){
		referPeopleToPosition(precedessor);
	}

	//send new people
    // dont send to channel, which sunk
	for(i = 0; i &lt; 4 ; i++){
		//channels[partIndex][i] = SIZE_CHANNEL - channels[i][partIndex];
		//don't send negative amount of people...
	}
}

void manageSavePeople(){
    int i;
	//save people - let them jump to boat
	int savedPeople = 10;
	if(positionPeopleCount[partIndex] &lt; 10){
		savedPeople = positionPeopleCount[partIndex];
	}
	positionPeopleCount[partIndex] = positionPeopleCount[partIndex] - savedPeople;
	passangerCountOnBoard = passangerCountOnBoard - savedPeople;
}</declaration>
		<location id="id0" x="144" y="-64">
			<name x="134" y="-94">CAPTAIN_SAVED</name>
		</location>
		<location id="id1" x="-176" y="40">
			<name x="-240" y="-16">RULING</name>
		</location>
		<location id="id2" x="-104" y="-128">
			<name x="-57" y="-176">SAVING_PEOPLE</name>
			<label kind="invariant" x="-80" y="-152">progress_time &lt; 5</label>
		</location>
		<location id="id3" x="-48" y="-216">
			<name x="-58" y="-246">INIT</name>
			<committed/>
		</location>
		<location id="id4" x="-224" y="-152">
			<name x="-234" y="-182">DEAD</name>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="8" y="-112">positionPeopleCount[partIndex] = 0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-48" y="0">!isPeopleArriving()</label>
			<label kind="synchronisation" x="-64" y="24">manageSendingPeople()</label>
			<nail x="-48" y="8"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-316" y="24">isPeopleArriving()</label>
			<label kind="assignment" x="-384" y="40">manageArrivingPeople()</label>
			<nail x="-276" y="96"/>
			<nail x="-220" y="128"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-384" y="-104">positionPeopleCount[partIndex] &gt; 0</label>
			<label kind="synchronisation" x="-320" y="-72">manageSavePeople()</label>
			<nail x="-152" y="-56"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="assignment" x="-40" y="-200">progress_time = 0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-160" y="-152">sink?</label>
		</transition>
	</template>
	<template>
		<name>Ship</name>
		<declaration>clock periodTime;
clock sunkTime;

int sinkingPart;

int getSunkPart(){
    int i;
    for( i = 0 ; i &lt; 4 ; i++){
        if(floodedParts[i] == false){
            return i;
        }
    }
    return -1; // throws "The successors of this state are not well defined." error if something is wrong
}

bool isShipSunken(){
    int i;
	for( i = 0 ; i &lt; 4 ; i++){
		if(floodedParts[i] == false){
			return false;
		}
	}
	return true;
}</declaration>
		<location id="id5" x="-2832" y="-224">
			<name x="-2842" y="-254">SUNK_PART</name>
		</location>
		<location id="id6" x="-2960" y="-16">
			<name x="-3104" y="-64">INITIAL_UPDATE_VARIABLES</name>
			<committed/>
		</location>
		<location id="id7" x="-2712" y="-8">
			<name x="-2728" y="32">SHIP_SUNKEN</name>
			<urgent/>
		</location>
		<location id="id8" x="-2736" y="-112">
			<name x="-2744" y="-160">SHIP_FLOATING</name>
			<label kind="invariant" x="-2712" y="-128">periodTime &lt;= PERIOD_TIME_MAX</label>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id5"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-2792" y="-208">floodedPartsChan[sinkingPart]!</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="select" x="-3776" y="-208">p1 : position_people_start_count_type,
p2 : position_people_start_count_type,
p3 : position_people_start_count_type,
p4 : position_people_start_count_type</label>
			<label kind="guard" x="-3776" y="-128">p1 + p2 + p3 + p4 == START_PASSANGER_COUNT</label>
			<label kind="assignment" x="-3776" y="-96">positionPeopleCount[0] = p1,
positionPeopleCount[1] = p2,
positionPeopleCount[2] = p3,
positionPeopleCount[3] = p4,
floodedParts[0] = false,
floodedParts[1] = false,
floodedParts[2] = false,
floodedParts[3] = false,
channels[0][0] = 0,
channels[0][1] = 0,
channels[0][2] = 0,
channels[0][3] = 0,
channels[1][0] = 0,
channels[1][1] = 0,
channels[1][2] = 0,
channels[1][3] = 0,
channels[2][0] = 0,
channels[2][1] = 0,
channels[2][2] = 0,
channels[2][3] = 0,
channels[3][0] = 0,
channels[3][1] = 0,
channels[3][2] = 0,
channels[3][3] = 0</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<nail x="-2648" y="24"/>
			<nail x="-2656" y="-32"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-2696" y="-80">isShipSunken()</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id5"/>
			<label kind="guard" x="-3232" y="-192">!isShipSunken() and periodTime &gt;= PERIOD_TIME_MIN</label>
			<label kind="assignment" x="-3096" y="-176">sinkingPart = getSunkPart(),
periodTime = 0,
floodedParts[sinkingPart] = true</label>
			<nail x="-2832" y="-120"/>
			<nail x="-2864" y="-152"/>
		</transition>
	</template>
	<template>
		<name>HazardPlayer</name>
		<parameter>int &amp; partIndex, urgent chan&amp; sink</parameter>
		<declaration>clock progress_time;

bool isPartSunken(){
	return floodedParts[partIndex];
}

bool isPeopleArrivingPeople(){
    int i;
	for(i = 0; i &lt; 4 ; i++){
        if (channels[partIndex][i] != 0) return true;
	}
    return false;
}

void manageArrivingPeople(){
    int i;
	//people arrived to position
	for(i = 0; i &lt; 4 ; i++){
		positionPeopleCount[i] = positionPeopleCount[i] + channels[partIndex][i];
		channels[partIndex][i] = 0;
	}

}

void manageSendingPeople(){
    int i;
	//send new people
    // dont send to channel, which sunk
	for(i = 0; i &lt; 4 ; i++){
		//channels[partIndex][i] = SIZE_CHANNEL - channels[i][partIndex];
		//don't send negative amount of people...
	}
}

void manageSavePeople(){
    int i;
	//save people - let them jump to boat
	int savedPeople = 10;
	if(positionPeopleCount[partIndex] &lt; 10){
		savedPeople = positionPeopleCount[partIndex];
	}
	positionPeopleCount[partIndex] = positionPeopleCount[partIndex] - savedPeople;
	passangerCountOnBoard = passangerCountOnBoard - savedPeople;
}</declaration>
		<location id="id9" x="-144" y="88">
			<name x="-208" y="32">RULING</name>
		</location>
		<location id="id10" x="-16" y="-168">
			<name x="-26" y="-198">INIT</name>
			<committed/>
		</location>
		<location id="id11" x="-192" y="-104">
			<name x="-202" y="-134">DEAD</name>
		</location>
		<location id="id12" x="-40" y="-40">
			<name x="-16" y="-104">SAVING_PEOPLE</name>
			<label kind="invariant" x="-16" y="-64">progress_time &lt; 5</label>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id9"/>
			<target ref="id12"/>
			<label kind="guard" x="-16" y="48">!isPeopleArriving()</label>
			<label kind="synchronisation" x="-32" y="72">manageSendingPeople()</label>
			<nail x="-16" y="56"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id9"/>
			<label kind="guard" x="-284" y="72">isPeopleArriving()</label>
			<label kind="assignment" x="-352" y="88">manageArrivingPeople()</label>
			<nail x="-244" y="144"/>
			<nail x="-188" y="176"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-248" y="-32">manageSavePeople()</label>
			<nail x="-112" y="0"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id12"/>
			<label kind="assignment" x="-8" y="-152">progress_time = 0</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-128" y="-104">sink?</label>
		</transition>
	</template>
	<template>
		<name>Priest</name>
		<parameter>int &amp; partIndex, urgent chan &amp; sink</parameter>
		<declaration>clock progress_time;

bool isPartSunken(){
	return floodedParts[partIndex];
}

bool isPeopleArriving(){
    int i;
	for(i = 0; i &lt; 4 ; i++){
        if (channels[partIndex][i] != 0) return true;
	}
    return false;
}

void manageArrivingPeople(){
    int i;
	//people arrived to position
	for(i = 0; i &lt; 4 ; i++){
		positionPeopleCount[i] = positionPeopleCount[i] + channels[partIndex][i];
		channels[partIndex][i] = 0;
	}

}

void manageSendingPeople(){
    int i;
	//send new people
    // dont send to channel, which sunk
	for(i = 0; i &lt; 4 ; i++){
		//channels[partIndex][i] = SIZE_CHANNEL - channels[i][partIndex];
		//don't send negative amount of people...
	}
}

void manageSavePeople(){
    int i;
	//save people - let them jump to boat
	int savedPeople = 10;
	if(positionPeopleCount[partIndex] &lt; 10){
		savedPeople = positionPeopleCount[partIndex];
	}
	positionPeopleCount[partIndex] = positionPeopleCount[partIndex] - savedPeople;
	passangerCountOnBoard = passangerCountOnBoard - savedPeople;
}</declaration>
		<location id="id13" x="-144" y="88">
			<name x="-184" y="48">RULING</name>
		</location>
		<location id="id14" x="-40" y="-40">
			<name x="-16" y="-104">SAVING_PEOPLE</name>
			<label kind="invariant" x="-16" y="-64">progress_time &lt; 5</label>
		</location>
		<location id="id15" x="-16" y="-168">
			<name x="-26" y="-198">INIT</name>
			<committed/>
		</location>
		<location id="id16" x="-192" y="-104">
			<name x="-202" y="-134">DEAD</name>
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-16" y="48">!isPeopleArriving()</label>
			<label kind="synchronisation" x="-32" y="72">manageSendingPeople()</label>
			<nail x="-16" y="56"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id13"/>
			<label kind="guard" x="-284" y="72">isPeopleArriving</label>
			<label kind="assignment" x="-352" y="88">manageArrivingPeople()</label>
			<nail x="-244" y="144"/>
			<nail x="-188" y="176"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-248" y="-32">manageSavePeople()</label>
			<nail x="-112" y="0"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="assignment" x="-8" y="-152">progress_time = 0</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-128" y="-104">sink?</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
//ship = Ship(period_time, move_people, boat_sunken, time_progress);
int captain_index = 2;
//captain = Captain (boat_sunken, move_people, people_amount, captain_index);

// List one or more processes to be composed into a system.
//system captain, timer;

int index_0 = 0;

int index_1 = 1;

int index_2 = 2;

int index_3 = 3;

position1 = HazardPlayer(index_0, floodedPartsChan[0]);
position2 = HazardPlayer(index_1, floodedPartsChan[1]);
position3 = HazardPlayer(index_2, floodedPartsChan[2]);
position4 = HazardPlayer(index_3, floodedPartsChan[3]);
ship = Ship();

system ship, position1, position2, position3, position4;</system>
</nta>
